    function camelize(string){
        let  arr = string.split('-')

        if (arr[0] === '-' || arr[0] === '') {
            arr.shift();
        }

        for (let i = 1; i < arr.length; i++) {
            let stringArr = arr[i].split('');

            stringArr[0] = stringArr[0].toUpperCase();
            arr[i] = stringArr.join('');
        }

        return arr.join('');
    }

camelize("background-color") == 'backgroundColor';
camelize("list-style-image") == 'listStyleImage';
camelize("-webkit-transition") == 'WebkitTransition';


Write a function filterRange(arr, a, b) that gets an array arr, looks for elements between a and b in it and returns an array of them.

    The function should not modify the array. It should return the new array.

For instance:

    let arr = [5, 3, 8, 1];

let filtered = filterRange(arr, 1, 4);

filtered ); // 3,1 (matching values)

arr ); // 5,3,8,1 (not modified)

Open a sandbox with tests.
    Filter range "in place"
importance: 4

Write a function filterRangeInPlace(arr, a, b) that gets an array arr and removes from it all values except those that are between a and b. The test is: a ≤ arr[i] ≤ b.

    The function should only modify the array. It should not return anything.

    For instance:

    let arr = [5, 3, 8, 1];

filterRangeInPlace(arr, 1, 4); // removed the numbers except from 1 to 4

arr ); // [3, 1]

Open a sandbox with tests.
    Sort in the reverse order
importance: 4

let arr = [5, 2, 1, -10, 8];

// ... your code to sort it in the reverse order

arr ); // 8, 5, 2, 1, -10

Copy and sort array
importance: 5

We have an array of strings arr. We’d like to have a sorted copy of it, but keep arr unmodified.

    Create a function copySorted(arr) that returns such a copy.

    let arr = ["HTML", "JavaScript", "CSS"];

let sorted = copySorted(arr);

sorted ); // CSS, HTML, JavaScript
arr ); // HTML, JavaScript, CSS (no changes)

Create an extendable calculator
importance: 5

Create a constructor function Calculator that creates “extendable” calculator objects.

    The task consists of two parts.

    First, implement the method calculate(str) that takes a string like "1 + 2" in the format “NUMBER operator NUMBER” (space-delimited) and returns the result. Should understand plus + and minus -.

Usage example:

    let calc = new Calculator;

calc.calculate("3 + 7") ); // 10

Then add the method addMethod(name, func) that teaches the calculator a new operation. It takes the operator name and the two-argument function func(a,b) that implements it.

    For instance, let’s add the multiplication *, division / and power **:

let powerCalc = new Calculator;
powerCalc.addMethod("*", (a, b) => a * b);
powerCalc.addMethod("/", (a, b) => a / b);
powerCalc.addMethod("**", (a, b) => a ** b);

let result = powerCalc.calculate("2 ** 3");
result ); // 8

No brackets or complex expressions in this task.
    The numbers and the operator are delimited with exactly one space.
    There may be error handling if you’d like to add it.

    Open a sandbox with tests.
    Map to names
importance: 5

You have an array of user objects, each one has user.name. Write the code that converts it into an array of names.

    For instance:

    let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 28 };

let users = [ john, pete, mary ];

let names = /* ... your code */

    names ); // John, Pete, Mary

Map to objects
importance: 5

You have an array of user objects, each one has name, surname and id.

    Write the code to create another array from it, of objects with id and fullName, where fullName is generated from name and surname.

    For instance:








    let john = { name: "John", surname: "Smith", id: 1 };
let pete = { name: "Pete", surname: "Hunt", id: 2 };
let mary = { name: "Mary", surname: "Key", id: 3 };

let users = [ john, pete, mary ];

let usersMapped = /* ... your code ... */

    /*
     usersMapped = [
     { fullName: "John Smith", id: 1 },
     { fullName: "Pete Hunt", id: 2 },
     { fullName: "Mary Key", id: 3 }
     ]
     */

    usersMapped[0].id ) // 1
usersMapped[0].fullName ) // John Smith

So, actually you need to map one array of objects to another. Try using => here. There’s a small catch.
Sort objects
importance: 5

Write the function sortByName(users) that gets an array of objects with property name and sorts it.

    For instance:

    let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 28 };

let arr = [ john, pete, mary ];

sortByName(arr);

// now: [john, mary, pete]
arr[1].name); // Mary

Shuffle an array
importance: 3

Write the function shuffle(array) that shuffles (randomly reorders) elements of the array.

    Multiple runs of shuffle may lead to different orders of elements. For instance:

    let arr = [1, 2, 3];

shuffle(arr);
// arr = [3, 2, 1]

shuffle(arr);
// arr = [2, 1, 3]

shuffle(arr);
// arr = [3, 1, 2]
// ...

All element orders should have an equal probability. For instance, [1,2,3] can be reordered as [1,2,3] or [1,3,2] or [3,1,2] etc, with equal probability of each case.
Get average age
importance: 4

Write the function getAverageAge(users) that gets an array of objects with property age and gets the average.

    The formula for the average is (age1 + age2 + ... + ageN) / N.

    For instance:

    let john = { name: "John", age: 25 };
let pete = { name: "Pete", age: 30 };
let mary = { name: "Mary", age: 29 };

let arr = [ john, pete, mary ];

getAverageAge(arr) ); // (25 + 30 + 29) / 3 = 28

Filter unique array members
importance: 4

Let arr be an array.

    Create a function unique(arr) that should return an array with unique items of arr.

    For instance:

    function unique(arr) {
        /* your code */
    }

let strings = ["Hare", "Krishna", "Hare", "Krishna",
    "Krishna", "Krishna", "Hare", "Hare", ":-O"
];

unique(strings) ); // Hare, Krishna, :-O

Open a sandbox with tests.
